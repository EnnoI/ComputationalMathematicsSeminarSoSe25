{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "778fa455",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Usage: python simulate_fig4b_clean.py <zeta> <lambda>\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "1",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[31mSystemExit\u001b[39m\u001b[31m:\u001b[39m 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\anuhe\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\IPython\\core\\interactiveshell.py:3680: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from scipy.ndimage import label, center_of_mass\n",
    "import sys\n",
    "from tqdm import trange\n",
    "\n",
    "# --- Parameters ---\n",
    "L = 128        # Box size\n",
    "N = 256        # Grid points\n",
    "dx = L / N\n",
    "x = np.linspace(-L/2, L/2, N, endpoint=False)\n",
    "y = np.linspace(-L/2, L/2, N, endpoint=False)\n",
    "X, Y = np.meshgrid(x, y, indexing=\"ij\")\n",
    "\n",
    "R1 = 10   # Radius of big droplet\n",
    "R2 = 6    # Radius of small droplet\n",
    "\n",
    "# --- Build 2-droplet initial condition ---\n",
    "def build_two_droplets():\n",
    "    phi = -1 * np.ones_like(X)\n",
    "    d1 = (X+20)**2 + Y**2 < R1**2\n",
    "    d2 = (X-20)**2 + Y**2 < R2**2\n",
    "    phi[d1] = 1\n",
    "    phi[d2] = 1\n",
    "    return phi\n",
    "\n",
    "# --- AMB+ Parameters ---\n",
    "A, B, K = 1.0, 1.0, 1.0\n",
    "D = 0.0     # Noise OFF\n",
    "M = 1.0\n",
    "\n",
    "def run_sim(phi0, lam, zeta, tau=0.01, T=100.0, save_every=100):\n",
    "    kx = np.fft.fftfreq(N, d=dx) * 2*np.pi\n",
    "    ky = np.fft.fftfreq(N, d=dx) * 2*np.pi\n",
    "    KX, KY = np.meshgrid(kx, ky, indexing=\"ij\")\n",
    "    K2 = KX**2 + KY**2\n",
    "    K4 = K2**2\n",
    "    dt = tau\n",
    "    steps = int(T / dt)\n",
    "    \n",
    "    phi = phi0.copy()\n",
    "    f_phi = np.fft.fft2(phi)\n",
    "\n",
    "    log = []\n",
    "    \n",
    "    for step in trange(steps):\n",
    "        phi = np.real(np.fft.ifft2(f_phi))\n",
    "        phi3 = phi**3\n",
    "        \n",
    "        dphi_dx = np.real(np.fft.ifft2(1j*KX*f_phi))\n",
    "        dphi_dy = np.real(np.fft.ifft2(1j*KY*f_phi))\n",
    "        grad_phi2 = dphi_dx**2 + dphi_dy**2\n",
    "        lap_phi = np.real(np.fft.ifft2(-K2 * f_phi))\n",
    "        \n",
    "        Jzeta_x = np.fft.fft2(lap_phi * dphi_dx)\n",
    "        Jzeta_y = np.fft.fft2(lap_phi * dphi_dy)\n",
    "        Jzeta = 1j*KX*Jzeta_x + 1j*KY*Jzeta_y\n",
    "\n",
    "        mu = -A*phi + B*phi3 - K*lap_phi + lam*grad_phi2\n",
    "        f_mu = np.fft.fft2(mu)\n",
    "\n",
    "        rhs = -K2*f_mu - zeta*Jzeta\n",
    "        f_phi = (f_phi + dt*M*rhs) / (1 + dt*M*K4)\n",
    "\n",
    "        # Track every few steps\n",
    "        if step % save_every == 0:\n",
    "            phi = np.real(np.fft.ifft2(f_phi))\n",
    "            R_big, R_small = measure_radii(phi)\n",
    "            log.append([step*dt, R_big, R_small])\n",
    "\n",
    "    return np.array(log)\n",
    "\n",
    "# --- Radius detection ---\n",
    "def measure_radii(phi):\n",
    "    mask = phi > 0.0\n",
    "    labeled, n = label(mask)\n",
    "    if n < 2:\n",
    "        return [0, 0]\n",
    "\n",
    "    sizes = [(labeled==i+1).sum() for i in range(n)]\n",
    "    areas = np.array(sizes)*dx*dx\n",
    "    radii = np.sqrt(areas/np.pi)\n",
    "    radii.sort()  # ascending\n",
    "    return [radii[-1], radii[-2]]\n",
    "\n",
    "# --- Region classification ---\n",
    "def classify(dlog):\n",
    "    R1_0, R2_0 = dlog[0,1], dlog[0,2]\n",
    "    R1_f, R2_f = dlog[-1,1], dlog[-1,2]\n",
    "    if R1_f > R1_0 and R2_f < R2_0:\n",
    "        return \"A\"\n",
    "    elif R2_f > R2_0 and R1_f < R1_0:\n",
    "        return \"B\"\n",
    "    elif R1_f > R1_0 and R2_f > R2_0:\n",
    "        return \"C\"\n",
    "    else:\n",
    "        return \"Undetermined\"\n",
    "\n",
    "# --- Main script ---\n",
    "if __name__ == \"__main__\":\n",
    "    if len(sys.argv) != 3:\n",
    "        print(\"Usage: python simulate_fig4b_clean.py <zeta> <lambda>\")\n",
    "        sys.exit(1)\n",
    "    \n",
    "    zeta_val = float(sys.argv[1])\n",
    "    lambda_val = float(sys.argv[2])\n",
    "\n",
    "    phi0 = build_two_droplets()\n",
    "    log = run_sim(phi0, lambda_val, zeta_val, T=1000.0)\n",
    "\n",
    "    np.savetxt(\"radii_log.csv\", log, delimiter=\",\", header=\"time,R1,R2\")\n",
    "    region = classify(log)\n",
    "\n",
    "    with open(\"region.txt\", \"w\") as f:\n",
    "        f.write(region + \"\\n\")\n",
    "\n",
    "    print(f\"✓ ζ={zeta_val:.2f}, λ={lambda_val:.2f} → Region {region}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
